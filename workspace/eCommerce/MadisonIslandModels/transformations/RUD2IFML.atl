
-- Generated by: 
	
module RUD2IFML;

create OUT : OUTMODEL from IN : INMODEL, IN2: RUD;

helper def : inElements : Set(INMODEL!"ecore::EObject") = INMODEL!"ecore::EObject".allInstancesFrom('IN');

--get regionLabel with higher seconds in region (with maxSecondsInRegion > 100)
helper def : getMaxSecondsInRegion() : RUD!SessionRegion = 
	RUD!SessionRegion.allInstancesFrom('IN2')->select(e|e.maxSecondsInRegion > 100).first();

--is true if Section Action has at least one scanned items
helper def : hasSectionActions() : Boolean = 
	RUD!SessionAction.allInstancesFrom('IN2')->select(e|e.scannedItems->notEmpty())->notEmpty();

--is true if Web Data has a parameterBindingGroup
helper def : hasWebData() : Boolean = 
	RUD!WebData.allInstancesFrom('IN2')->select(e| not e.parameterBindingGroup->oclIsUndefined())->notEmpty();
	
	
rule InteractionFlowExpression {
    from s : INMODEL!"IFML::Core::InteractionFlowExpression" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::InteractionFlowExpression" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        language <- s.language,
        body <- s.body,
        constraints <- s.constraints,
        annotations <- s.annotations,
        interactionFlow <- s.interactionFlow)
}

rule SystemEvent {
    from s : INMODEL!"IFML::Core::SystemEvent" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::SystemEvent")
		else false endif)
    to t : OUTMODEL!"IFML::Core::SystemEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        type <- s.type,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression,
        triggeringExpressions <- s.triggeringExpressions)
}

rule ParameterBinding {
    from s : INMODEL!"IFML::Core::ParameterBinding" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::ParameterBinding" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        constraints <- s.constraints,
        annotations <- s.annotations,
        sourceParameter <- s.sourceParameter,
        targetParameter <- s.targetParameter)
}

rule ActionEvent {
    from s : INMODEL!"IFML::Core::ActionEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::ActionEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression)
}

rule DomainModel {
    from s : INMODEL!"IFML::Core::DomainModel" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::DomainModel" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        domainElements <- s.domainElements)
}

rule PortDefinition {
    from s : INMODEL!"IFML::Core::PortDefinition" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::PortDefinition" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        ports <- s.ports)
}

rule ViewElement {
    from s : INMODEL!"IFML::Core::ViewElement" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::ViewElement")
		else false endif)
    to t : OUTMODEL!"IFML::Core::ViewElement" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression)
}

rule DynamicBehavior {
    from s : INMODEL!"IFML::Core::DynamicBehavior" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::DynamicBehavior" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        uniformResourceIdentifier <- s.uniformResourceIdentifier,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        subViewComponentParts <- s.subViewComponentParts,
        behavioralFeatureConcept <- s.behavioralFeatureConcept,
        behaviorConcept <- s.behaviorConcept)
}

rule Viewpoint {
    from s : INMODEL!"IFML::Core::Viewpoint" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::Viewpoint" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        interactionFlowModelElements <- s.interactionFlowModelElements,
        "context" <- s."context")
}

rule DataFlow {
    from s : INMODEL!"IFML::Core::DataFlow" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::DataFlow" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameterBindingGroup <- s.parameterBindingGroup,
        targetInteractionFlowElement <- s.targetInteractionFlowElement)
}


rule ViewComponentPart {
    from s : INMODEL!"IFML::Core::ViewComponentPart" 
			(if thisModule.inElements->includes(s) then
				s.oclIsTypeOf(INMODEL!"IFML::Core::ViewComponentPart") 
			else false endif)
		 
    to t : OUTMODEL!"IFML::Core::ViewComponentPart" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        subViewComponentParts <- s.subViewComponentParts)
}

rule ViewContainer {
    from s : INMODEL!"IFML::Core::ViewContainer" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::ViewContainer")
		else false endif)
    to t : OUTMODEL!"IFML::Core::ViewContainer" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        isLandmark <- s.isLandmark,
        isDefault <- s.isDefault,
        isXOR <- s.isXOR,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        viewElements <- s.viewElements,
        actions <- s.actions)
}

rule ActivationExpression {
    from s : INMODEL!"IFML::Core::ActivationExpression" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::ActivationExpression" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        language <- s.language,
        body <- s.body,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule InteractionFlowModel {
    from s : INMODEL!"IFML::Core::InteractionFlowModel" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::InteractionFlowModel" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        interactionFlowModelElements <- s.interactionFlowModelElements)
}

rule ContextDimension {
    from s : INMODEL!"IFML::Core::ContextDimension" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::ContextDimension")
		else false endif)
    to t : OUTMODEL!"IFML::Core::ContextDimension" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule IFMLModel {
    from s : INMODEL!"IFML::Core::IFMLModel" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::IFMLModel" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        interactionFlowModel <- s.interactionFlowModel,
        domainModel <- s.domainModel,
        interactionFlowModelViewpoint <- s.interactionFlowModelViewpoint)
}

rule ModuleDefinition {
    from s : INMODEL!"IFML::Core::ModuleDefinition" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::ModuleDefinition" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        inputPorts <- s.inputPorts,
        outputPorts <- s.outputPorts,
        interactionFlowModelElement <- s.interactionFlowModelElement,
        modules <- s.modules,
        activityConcept <- s.activityConcept)
}

rule BooleanExpression {
    from s : INMODEL!"IFML::Core::BooleanExpression" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::BooleanExpression")
		else false endif)
    to t : OUTMODEL!"IFML::Core::BooleanExpression" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        language <- s.language,
        body <- s.body,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule IFMLAction {
    from s : INMODEL!"IFML::Core::IFMLAction" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::IFMLAction" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        actionEvents <- s.actionEvents,
        dynamicBehavior <- s.dynamicBehavior)
}

rule NavigationFlow {
    from s : INMODEL!"IFML::Core::NavigationFlow" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::NavigationFlow" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameterBindingGroup <- s.parameterBindingGroup,
        targetInteractionFlowElement <- s.targetInteractionFlowElement)
}

rule ParameterBindingGroup {
    from s : INMODEL!"IFML::Core::ParameterBindingGroup" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::ParameterBindingGroup" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameterBindings <- s.parameterBindings)
}

rule Constraint {
    from s : INMODEL!"IFML::Core::Constraint" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::Constraint")
		else false endif)
    to t : OUTMODEL!"IFML::Core::Constraint" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        language <- s.language,
        body <- s.body,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule ViewComponent {
    from s : INMODEL!"IFML::Core::ViewComponent" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::ViewComponent")
		else false endif)
    to t : OUTMODEL!"IFML::Core::ViewComponent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        viewComponentParts <- s.viewComponentParts)
}

rule IFMLParameter {
    from s : INMODEL!"IFML::Core::IFMLParameter" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::IFMLParameter")
		else false endif)
    to t : OUTMODEL!"IFML::Core::IFMLParameter" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        direction <- s.direction,
        constraints <- s.constraints,
        annotations <- s.annotations,
        defaultValue <- s.defaultValue,
        type <- s.type)
}

rule DataBinding {
    from s : INMODEL!"IFML::Core::DataBinding" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::DataBinding" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        uniformResourceIdentifier <- s.uniformResourceIdentifier,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        subViewComponentParts <- s.subViewComponentParts,
        conditionalExpression <- s.conditionalExpression,
        visualizationAttribute <- s.visualizationAttribute,
        dataContextVariables <- s.dataContextVariables,
        domainConcept <- s.domainConcept)
}


rule ConditionalExpression {
    from s : INMODEL!"IFML::Core::ConditionalExpression" (thisModule.inElements->includes(s) 
    		and s->refImmediateComposite()->refImmediateComposite()->refImmediateComposite().name <> 'HighlightedCategoryBanner #1')
    to t : OUTMODEL!"IFML::Core::ConditionalExpression" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        language <- s.language,
        body <- s.body,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        subViewComponentParts <- s.subViewComponentParts)
}

-- Homepage updates
rule ConditionalExpressionUpdated {
    from s : INMODEL!"IFML::Core::ConditionalExpression" (thisModule.inElements->includes(s) 
    			and s->refImmediateComposite()->refImmediateComposite()->refImmediateComposite().name = 'HighlightedCategoryBanner #1')
    to t : OUTMODEL!"IFML::Core::ConditionalExpression" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        language <- s.language,
        body <- s.body,
        --name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        subViewComponentParts <- s.subViewComponentParts)
	do {
		t.name <- thisModule.getMaxSecondsInRegion().regionLabel;
		t.body <- 'Category.ID=' + thisModule.getMaxSecondsInRegion().regionId;
	}
}

rule Context {
    from s : INMODEL!"IFML::Core::Context" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::Context" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        constraints <- s.constraints,
        annotations <- s.annotations,
        contextDimensions <- s.contextDimensions,
        contextVariables <- s.contextVariables)
}

rule VisualizationAttribute {
    from s : INMODEL!"IFML::Core::VisualizationAttribute" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::VisualizationAttribute" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        subViewComponentParts <- s.subViewComponentParts,
        featureConcept <- s.featureConcept)
}

rule Event {
    from s : INMODEL!"IFML::Core::Event" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::Event")
		else false endif)
    to t : OUTMODEL!"IFML::Core::Event" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression)
}

rule ViewElementEvent {
    from s : INMODEL!"IFML::Core::ViewElementEvent" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::ViewElementEvent")
		else false endif)
    to t : OUTMODEL!"IFML::Core::ViewElementEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression,
        viewElement <- s.viewElement)
}

rule Annotation {
    from s : INMODEL!"IFML::Core::Annotation" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::Annotation" (
        __xmiID__ <- s.__xmiID__,
        text <- s.text)
}

rule ModulePackage {
    from s : INMODEL!"IFML::Core::ModulePackage" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::ModulePackage" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        modularizationElements <- s.modularizationElements)
}

rule ModularizationElement {
    from s : INMODEL!"IFML::Core::ModularizationElement" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::ModularizationElement")
		else false endif)
    to t : OUTMODEL!"IFML::Core::ModularizationElement" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule IFMLModule {
    from s : INMODEL!"IFML::Core::IFMLModule" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::IFMLModule" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        moduleDefinition <- s.moduleDefinition,
        ports <- s.ports)
}

rule IFMLPort {
    from s : INMODEL!"IFML::Core::IFMLPort" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::IFMLPort" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        portDefinition <- s.portDefinition,
        "module" <- s."module")
}

rule CatchingEvent {
    from s : INMODEL!"IFML::Core::CatchingEvent" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::CatchingEvent")
		else false endif)
    to t : OUTMODEL!"IFML::Core::CatchingEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression)
}

rule ThrowingEvent {
    from s : INMODEL!"IFML::Core::ThrowingEvent" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::ThrowingEvent")
		else false endif)
    to t : OUTMODEL!"IFML::Core::ThrowingEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression)
}

rule BPMNActivityConcept {
    from s : INMODEL!"IFML::Core::BPMNActivityConcept" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::BPMNActivityConcept" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        moduleDefinition <- s.moduleDefinition)
}

rule ContextVariable {
    from s : INMODEL!"IFML::Core::ContextVariable" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::ContextVariable")
		else false endif)
    to t : OUTMODEL!"IFML::Core::ContextVariable" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        scope <- s.scope,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule SimpleContextVariable {
    from s : INMODEL!"IFML::Core::SimpleContextVariable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::SimpleContextVariable" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        scope <- s.scope,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule DataContextVariable {
    from s : INMODEL!"IFML::Core::DataContextVariable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::DataContextVariable" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        scope <- s.scope,
        constraints <- s.constraints,
        annotations <- s.annotations,
        dataBinding <- s.dataBinding)
}

rule DomainConcept {
    from s : INMODEL!"IFML::Core::DomainConcept" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::DomainConcept")
		else false endif)
    to t : OUTMODEL!"IFML::Core::DomainConcept" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        dataBinding <- s.dataBinding)
}

rule FeatureConcept {
    from s : INMODEL!"IFML::Core::FeatureConcept" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::FeatureConcept")
		else false endif)
    to t : OUTMODEL!"IFML::Core::FeatureConcept" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        visualizationAttribute <- s.visualizationAttribute)
}

rule BehaviorConcept {
    from s : INMODEL!"IFML::Core::BehaviorConcept" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::BehaviorConcept")
		else false endif)
    to t : OUTMODEL!"IFML::Core::BehaviorConcept" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        dynamicBehavior <- s.dynamicBehavior)
}

rule BehavioralFeatureConcept {
    from s : INMODEL!"IFML::Core::BehavioralFeatureConcept" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::BehavioralFeatureConcept")
		else false endif)
    to t : OUTMODEL!"IFML::Core::BehavioralFeatureConcept" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        dynamicBehavior <- s.dynamicBehavior)
}

rule UMLBehavior {
    from s : INMODEL!"IFML::Core::UMLBehavior" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::UMLBehavior" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        dynamicBehavior <- s.dynamicBehavior,
        behavior <- s.behavior)
}

rule UMLBehavioralFeature {
    from s : INMODEL!"IFML::Core::UMLBehavioralFeature" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::UMLBehavioralFeature" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        dynamicBehavior <- s.dynamicBehavior,
        behavioralFeature <- s.behavioralFeature)
}

rule UMLDomainConcept {
    from s : INMODEL!"IFML::Core::UMLDomainConcept" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::UMLDomainConcept" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        dataBinding <- s.dataBinding,
        classifier <- s.classifier)
}

rule UMLStructuralFeature {
    from s : INMODEL!"IFML::Core::UMLStructuralFeature" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Core::UMLStructuralFeature" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        visualizationAttribute <- s.visualizationAttribute,
        structuralFeature <- s.structuralFeature)
}

rule ActivityConcept {
    from s : INMODEL!"IFML::Core::ActivityConcept" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::ActivityConcept")
		else false endif)
    to t : OUTMODEL!"IFML::Core::ActivityConcept" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        moduleDefinition <- s.moduleDefinition)
}

rule DomainElement {
    from s : INMODEL!"IFML::Core::DomainElement" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(INMODEL!"IFML::Core::DomainElement")
		else false endif)
    to t : OUTMODEL!"IFML::Core::DomainElement" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule OnSubmitEvent {
    from s : INMODEL!"IFML::Extensions::OnSubmitEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::OnSubmitEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression,
        viewElement <- s.viewElement)
}

rule ValidationRule {
    from s : INMODEL!"IFML::Extensions::ValidationRule" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::ValidationRule" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        language <- s.language,
        body <- s.body,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule List {
    from s : INMODEL!"IFML::Extensions::List" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::List" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        viewComponentParts <- s.viewComponentParts,
        selectEvent <- s.selectEvent)
}

rule Position {
    from s : INMODEL!"IFML::Extensions::Position" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::Position" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule UserRole {
    from s : INMODEL!"IFML::Extensions::UserRole" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::UserRole" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule IFMLSlot {
    from s : INMODEL!"IFML::Extensions::IFMLSlot" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::IFMLSlot" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        direction <- s.direction,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        subViewComponentParts <- s.subViewComponentParts,
        defaultValue <- s.defaultValue,
        type <- s.type)
}

rule OnSelectEvent {
    from s : INMODEL!"IFML::Extensions::OnSelectEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::OnSelectEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression,
        viewElement <- s.viewElement)
}

rule Form {
    from s : INMODEL!"IFML::Extensions::Form" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::Form" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        viewComponentParts <- s.viewComponentParts)
}

rule Device {
    from s : INMODEL!"IFML::Extensions::Device" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::Device" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations)
}

rule SelectionField {
    from s : INMODEL!"IFML::Extensions::SelectionField" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::SelectionField" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        direction <- s.direction,
        isMultiSelection <- s.isMultiSelection,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        subViewComponentParts <- s.subViewComponentParts,
        defaultValue <- s.defaultValue,
        type <- s.type)
}

rule SimpleField {
    from s : INMODEL!"IFML::Extensions::SimpleField" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::SimpleField" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        direction <- s.direction,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        subViewComponentParts <- s.subViewComponentParts,
        defaultValue <- s.defaultValue,
        type <- s.type)
}

rule Details {
    from s : INMODEL!"IFML::Extensions::Details" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::Details" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        viewComponentParts <- s.viewComponentParts)
}

-- Header Updates + Category Page Updates
rule IFMLWindow {
    from s : INMODEL!"IFML::Extensions::IFMLWindow" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::IFMLWindow" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        isLandmark <- s.isLandmark,
        isDefault <- s.isDefault,
        isXOR <- s.isXOR,
        isModal <- s.isModal,
        isNewWindow <- s.isNewWindow,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        viewElements <- s.viewElements,
        actions <- s.actions)
	 do {
	 	if (s.name = 'Header' and thisModule.hasSectionActions()) {
	 		t.viewElements <- thisModule.RecentRewardActions();
	 	} 
	 	if (s.name = 'Category' and thisModule.hasWebData()){
	 		t.viewElements <- thisModule.RecentViewedProducts();
	 	}
	}		
}

-- create an additional node to header
rule RecentRewardActions() {
	to v : OUTMODEL!"IFML::Extensions::List" (
	   	name <- 'RecentRewardActions',
		viewComponentParts <- Sequence{w,y,z}
	   ),
	   w : OUTMODEL!"IFML::Core::DataBinding" (
	   	name <- 'Rewards'
	   ),
	   y : OUTMODEL!"IFML::Core::VisualizationAttribute" (
	   	name <- 'Action Name'
	   ),
	   z : OUTMODEL!"IFML::Core::VisualizationAttribute" (
	   	name <- 'Points Attribution'
	   )
	do {
		v;
	}
}

-- create an additional node to category page
rule RecentViewedProducts() {
	to v : OUTMODEL!"IFML::Extensions::List" (
	   	name <- 'RecentlyViewedProducts',
		viewComponentParts <- Sequence{w,y,z1,z2,z3}
	   ),
	   w : OUTMODEL!"IFML::Extensions::OnSelectEvent" (
	   	name <- 'Product Selected'
	   ),
	   y : OUTMODEL!"IFML::Core::DataBinding" (
	   	name <- 'Product'
	   ),
	   z1 : OUTMODEL!"IFML::Core::VisualizationAttribute" (
	   	name <- 'Image'
	   ),
	   z2 : OUTMODEL!"IFML::Core::VisualizationAttribute" (
	   	name <- 'Name'
	   ),
	   z3 : OUTMODEL!"IFML::Core::VisualizationAttribute" (
	   	name <- 'Price'
	   )
	do {
		v;
	}
}

--

rule OnLoadEvent {
    from s : INMODEL!"IFML::Extensions::OnLoadEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::OnLoadEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        type <- s.type,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression,
        triggeringExpressions <- s.triggeringExpressions)
}

rule IFMLMenu {
    from s : INMODEL!"IFML::Extensions::IFMLMenu" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::IFMLMenu" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        isLandmark <- s.isLandmark,
        isDefault <- s.isDefault,
        isXOR <- s.isXOR,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        viewElementEvents <- s.viewElementEvents,
        activationExpression <- s.activationExpression,
        viewElements <- s.viewElements,
        actions <- s.actions)
}

rule JumpEvent {
    from s : INMODEL!"IFML::Extensions::JumpEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::JumpEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression,
        landingEvent <- s.landingEvent)
}

rule LandingEvent {
    from s : INMODEL!"IFML::Extensions::LandingEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::LandingEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression,
        jumpingEvents <- s.jumpingEvents)
}

rule SetContextEvent {
    from s : INMODEL!"IFML::Extensions::SetContextEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"IFML::Extensions::SetContextEvent" (
        __xmiID__ <- s.__xmiID__,
        id <- s.id,
        name <- s.name,
        constraints <- s.constraints,
        annotations <- s.annotations,
        parameters <- s.parameters,
        outInteractionFlows <- s.outInteractionFlows,
        inInteractionFlows <- s.inInteractionFlows,
        activationExpression <- s.activationExpression,
        interactionFlowExpression <- s.interactionFlowExpression)
}

